<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/util
        				http://www.springframework.org/schema/util/spring-util-4.3.xsd">  
    <!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> -->  
    <context:component-scan base-package="demo"/>   
      
    <!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->  
    <mvc:annotation-driven/>  
   
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的MyRealm.java -->  
    <bean id="myRealm" class="demo.realm.MyRealm"/>   
  
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"></property>
    </bean>  
  
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
		<!--越权访问跳转路径 -->
        <property name="unauthorizedUrl" value="/"/>  
        <property name="filters">  
         <util:map>  
             <entry key="kickout" value-ref="kickoutSessionControlFilter"/>  
         </util:map>  
     </property> 
        <!-- anon：它对应的过滤器里面是空的,什么都没做-->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <property name="filterChainDefinitions">  
            <value>  
                /** = kickout
                /default/login=anon <!-- 任何人都可以访问，匿名   -->
<!--                 /user/info**=authc 需要登录   -->
<!--                 /admin/listUser1**=authc,perms[admin:manage1]已经登录并且还要有admin:manage权限才可以访问   -->
<!--                 /admin/listUser2**=authc,perms["admin:manage1,admin:manage2"] -->
<!--                 /admin/listUser3**=authc,roles["admin,guest"] -->
<!--                 /admin/listUser4**=authc,roles[admin]已经登录并且还要有admin角色才可以访问   -->
<!--                 /admin/listUser4**=port[8081] -->
            </value>  
        </property>  
    </bean>  
  
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
  
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->  
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean -->  
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean>  
     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/"></property>  
        <property name="suffix" value=".jsp"></property>  
     </bean>  
     
     <!-- 1. 数据源 : DriverManagerDataSource -->  
    <bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />  
        <property name="url" value="jdbc:mysql://localhost:3306/shiro" />  
        <property name="username" value="root" />  
        <property name="password" value="123456" />  
    </bean>  
     
     <!--  
        2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源  
  
        MyBatis定义数据源,同意加载配置  
    -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="configLocation" value="classpath:mybatis-config.xml" />   
    </bean>  
    
    
    <!--  
        3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory  
  
        basePackage:指定sql映射文件/接口所在的包（自动扫描）  
    -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="demo.dao"></property>  
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>  
    </bean>  
     
     <!-- 缓存管理器 使用Ehcache实现 -->  
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
	    <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />  
	</bean>  
	
	<!-- 凭证匹配器 -->  
	<bean id="credentialsMatcher"  
	    class="demo.util.RetryLimitHashedCredentialsMatcher">  
	    <constructor-arg ref="cacheManager" />  
	    <property name="hashAlgorithmName" value="md5" />  
	    <property name="hashIterations" value="3" />  
	    <property name="storedCredentialsHexEncoded" value="true" />  
	</bean>  
	                                                            
	<bean id="kickoutSessionControlFilter"   class="demo.filter.kickoutSessionControlFilter">  
	    <!-- 	cacheManager：使用cacheManager获取相应的cache来缓存用户登录的会话；用于保存用户—会话之间的关系的； -->
	    <property name="cacheManager" ref="cacheManager"/>  
	    <!-- 	sessionManager：用于根据会话ID，获取会话进行踢出操作的； -->
	    <property name="sessionManager" ref="sessionManager"/>  
	    <!-- 	kickoutAfter：是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户； -->
	    <property name="kickoutAfter" value="false"/>  
	    <!-- 	maxSession：同一个用户最大的会话数，默认1；比如2的意思是同一个用户允许最多同时两个人登录； -->
	    <property name="maxSession" value="1"/>  
	    <!-- 	kickoutUrl：被踢出后重定向到的地址； -->
	    <property name="kickoutUrl" value="/401.jsp"/>  
	    <!-- Shiro提供SessionDAO用于会话的CRUD -->
        <property name="sessionDAO" ref="sessionDAO"/> 
	</bean>  
	
	<!-- 会话管理器 start -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 1小时: 3600000 -->
        <!-- 设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期 1800000 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 是否开启会话验证器，默认是开启的 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 
            Shiro提供了会话验证调度器，用于定期的验证会话是否已过期，如果过期将停止会话；
		            出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；
		            但是如在web环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，
            Shiro提供了会话验证调度器SessionValidationScheduler来做这件事情。
         -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/> 
        <!-- Shiro提供SessionDAO用于会话的CRUD -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 
		            是否启用/禁用Session Id Cookie，默认是启用的；
		            如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID，
		            且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。 
        -->
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 设置调度时间间隔，单位毫秒，默认就是1小时 -->
        <property name="interval" value="1800000"/>
        <!-- 设置会话验证调度器进行会话验证时的会话管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
<!--     <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler"> -->
<!--         <property name="sessionValidationInterval" value="1800000"/> -->
<!--         <property name="sessionManager" ref="sessionManager"/> -->
<!--     </bean> -->
    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!-- 设置Session缓存名字，默认就是shiro-activeSessionCache，要和ehcache.xml中的那么对应 -->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="cacheManager" ref="cacheManager"/>
<!--         <property name="activeSessionsCacheName" value="shiroCache"/> -->
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!-- 会话ID生成器，用于生成会话ID，默认就是JavaUuidSessionIdGenerator，使用java.util.UUID生成-->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
     <!-- 会话Cookie模板，sessionManager创建会话Cookie的模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- 设置Cookie名字，默认为JSESSIONID -->
<!--         <constructor-arg value="bjg_sid"/> -->
        <!-- 不修改使用默认的话，那么404的时候session就会过期 -->
        <property name="name" value="shiro.sesssion"/>
        <!-- 
	            如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；
	            此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持
         -->
        <property name="httpOnly" value="true"/>
        <!-- 设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie -->
        <property name="maxAge" value="-1"/>
        <!-- 设置Cookie的域名，默认空，即当前访问的域名 -->
<!--         <property name="domain" value=".bejavagod.com"/> -->
    </bean>
    <!-- 会话管理器 end -->
     
</beans>  